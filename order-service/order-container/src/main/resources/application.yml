server:
  port: 8181
# logging level set at base package com.food.ordering.system
logging:
  level:
    com.food.ordering.system: DEBUG
# names of the four Kafka topics
order-service:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response
# open in view = true:forces persistence context to stay open slowing performance
# datasource localhost default for postgreSQL = 5432
# datasource/binaryTransfer = quicker when kept in binary     jdbc server -> postgres server
# datasource/BatchedInserts = quicker, single insert statement with multiple values, rather than 121
# datasource/stringtype = all strings are sent un-typed stops string checking on UUID type on postgres (it would recognise UUID otherwise)
# basic username pword for now
# leaving deprecated in for now, try suggestions when working.
spring:
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
    platform: postgres
    schema: classpath:init-schema.sql
    initialization-mode: always
# kafka values for kafka config classes: Module Kafka/kafka-config-data com.food.ordering.system.kafka.config.data;
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-Key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3
# snappy represents mid-ground compression/performance / acks all == recommended /
kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16834
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5
#
kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id:
  restaurant-approval-consumer-group-id:
  customer-group-id:
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level:
  session-timeout-ms:
  heartbeat-interval-ms:
  max-poll-interval-ms:
  poll-timeout-ms:
  max-poll-records:
  max-partition-fetch-bytes-default:
  max-partition-fetch-bytes-boost-factor:


